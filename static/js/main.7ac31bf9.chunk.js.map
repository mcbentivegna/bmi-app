{"version":3,"sources":["Components/InputForm.js","Components/Header.js","Components/DisplayBMI.js","App.js","serviceWorker.js","index.js"],"names":["InputForm","state","height","weight","handleChange","e","setState","target","name","value","onSubmit","preventDefault","BMICalc","props","calculateBMI","handleSubmit","currentTarget","reset","className","this","type","onChange","min","max","placeholder","id","Component","Header","DisplayBMI","BMI","BMICategories","category","map","cat","selected","key","text","App","upper","Math","round","returnBMICategory","BMICategoriesFiltered","filter","length","prevState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iPA4DeA,E,4MAxDbC,MAAQ,CACNC,OAAQ,EACRC,OAAQ,G,EAGVC,aAAe,SAACC,GACd,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIhCC,SAAW,SAAAL,GACTA,EAAEM,iBACF,IAAMC,EAAU,EAAKC,MAAMC,aAAa,EAAKb,MAAMC,OAAQ,EAAKD,MAAME,QACtE,EAAKU,MAAME,aAAaH,GACxBP,EAAEW,cAAcC,S,uDAIhB,OACE,0BACEC,UAAU,cACVR,SAAYS,KAAKT,UACjB,6BACE,2BACEU,KAAK,SACLZ,KAAK,SACLa,SAAUF,KAAKf,aACfkB,IAAI,KACJC,IAAI,MACJC,YAAY,qBAEhB,yBAAKN,UAAY,SACf,2BACEE,KAAK,SACLZ,KAAK,SACLa,SAAUF,KAAKf,aACfkB,IAAI,IACJC,IAAI,OACJC,YAAY,qBAEhB,4BACA,4BACEJ,KAAK,SACLK,GAAG,SACHP,UAAU,iBAHZ,sB,GA3CgBQ,aCITC,EALA,kBACb,4BAAQT,UAAU,cAChB,gDCqBWU,EAtBI,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,cAAeC,EAAe,EAAfA,SACxC,OACE,6BACE,4BAAKF,GACL,4BACA,wBAAIX,UAAY,eACbY,EAAcE,KAAI,SAACC,GAClB,IAAMC,EAAwB,OAAbH,GAA4BE,EAAIF,WAAaA,EAASA,SACvE,OAAO,wBAAII,IAAKF,EAAIF,SAAUb,UAAagB,EAAW,oBAAsB,MAArE,IAA6ED,EAAIG,KAAjF,WCmDFC,E,4MAvDbpC,MAAQ,CACN4B,IAAK,G,EAGPC,cAAgB,CACd,CAACQ,MAAO,EAAGP,SAAU,QACrB,CAACO,MAAO,KAAMP,SAAU,cAAeK,KAAM,uBAC7C,CAACE,MAAO,KAAMP,SAAU,SAAUK,KAAM,uBACxC,CAACE,MAAO,GAAIP,SAAU,aAAcK,KAAM,yBAC1C,CAACL,SAAU,QAASK,KAAM,gB,EAG5BtB,aAAe,SAACZ,EAAQC,GACvB,IAAM0B,EAAM,IAAI1B,GAAQD,EAAOA,GAE/B,OADmBqC,KAAKC,MAAU,IAAJX,GAAS,K,EAIxCY,kBAAoB,SAACZ,GACnB,GAAY,IAARA,EACF,OAAO,KAGP,IAAMa,EAAwB,EAAKZ,cAAca,QAAQ,SAACV,GAAD,OAASA,EAAIK,MAAQT,KAC9E,OAAOa,EAAsBE,OAAO,EAAIF,EAAsB,GAAK,EAAKZ,cAAc,EAAKA,cAAcc,OAAO,I,EAIpH7B,aAAe,SAACc,GACd,EAAKvB,UAAU,SAAAuC,GACb,MAAO,CACLhB,W,uDAMJ,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEH,aAAgBI,KAAKJ,aACrBD,aAAgBK,KAAKL,eAEvB,4BACA,kBAAC,EAAD,CACEe,IAAOV,KAAKlB,MAAM4B,IAClBC,cAAiBX,KAAKW,cACtBC,SAAYZ,KAAKsB,kBAAkBtB,KAAKlB,MAAM4B,Y,GAjDtCH,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ac31bf9.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass InputForm extends Component {\r\n  state = {\r\n    height: 0,\r\n    weight: 0\r\n  }\r\n  \r\n  handleChange = (e) => {\r\n    this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n}\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault()\r\n    const BMICalc = this.props.calculateBMI(this.state.height, this.state.weight)\r\n    this.props.handleSubmit(BMICalc)\r\n    e.currentTarget.reset()\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <form\r\n        className=\"search-form\"\r\n        onSubmit = {this.onSubmit}>\r\n        <div>\r\n          <input\r\n            type=\"number\"\r\n            name=\"height\"\r\n            onChange={this.handleChange}\r\n            min=\"10\"\r\n            max=\"100\"\r\n            placeholder=\"Height (inches)\"/>\r\n        </div>\r\n        <div className = \"input\">\r\n          <input\r\n            type=\"number\"\r\n            name=\"weight\"\r\n            onChange={this.handleChange}\r\n            min=\"1\"\r\n            max=\"2000\"\r\n            placeholder=\"Weight (pounds)\"/>\r\n        </div>\r\n        <p></p>\r\n        <button\r\n          type=\"submit\"\r\n          id=\"submit\"\r\n          className=\"search-button\"\r\n        >Calculate BMI</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nInputForm.propTypes = {\r\n  handleSubmit: PropTypes.func\r\n}\r\n\r\nexport default InputForm\r\n","import React from 'react'\r\n\r\nconst Header = () => (\r\n  <header className=\"App-header\">\r\n    <h1>BMI Calculator</h1>\r\n  </header>\r\n)\r\nexport default Header\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DisplayBMI = ({ BMI, BMICategories, category }) => {\r\n  return (\r\n    <div>\r\n      <h1>{BMI}</h1>\r\n      <p></p>\r\n      <ul className = 'definitions'>\r\n        {BMICategories.map((cat) => {\r\n          const selected = category === null ? false : cat.category === category.category\r\n          return <li key={cat.category} className = {selected ? 'selected-category' : null}> {cat.text} </li>\r\n        })\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nDisplayBMI.propTypes = {\r\n  BMI: PropTypes.number,\r\n  BMICategories: PropTypes.arrayOf(PropTypes.object),\r\n  category: PropTypes.object\r\n}\r\n\r\nexport default DisplayBMI\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport InputForm from './Components/InputForm.js'\nimport Header from './Components/Header.js'\nimport DisplayBMI from './Components/DisplayBMI.js'\n\nclass App extends Component {\n  state = {\n    BMI: 0\n  };\n\n  BMICategories = [\n    {upper: 0, category: 'null'},\n    {upper: 18.5, category: 'underweight', text: 'Underweight: > 18.5'},\n    {upper: 24.9, category: 'normal', text: 'Normal: 18.6 - 24.9'},\n    {upper: 30, category: 'overweight', text: 'Overweight: 25 - 29.9'},\n    {category: 'obese', text: 'Obese: > 30'}\n  ]\n\n  calculateBMI = (height, weight) => {\n   const BMI = 703*weight/(height*height)\n   const roundedBMI = Math.round(BMI*100)/100\n   return roundedBMI\n  }\n\n  returnBMICategory = (BMI) => {\n    if (BMI === 0){\n      return null\n    }\n    else {\n      const BMICategoriesFiltered = this.BMICategories.filter( (cat) => cat.upper > BMI)\n      return BMICategoriesFiltered.length>0 ? BMICategoriesFiltered[0] : this.BMICategories[this.BMICategories.length-1]\n    }\n  }\n\n  handleSubmit = (BMI) => {\n    this.setState( prevState => {\n      return {\n        BMI\n      }\n    })\n  }\n  \n  render () {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <InputForm\n          handleSubmit = {this.handleSubmit}\n          calculateBMI = {this.calculateBMI}\n        />\n        <p></p>\n        <DisplayBMI\n          BMI = {this.state.BMI}\n          BMICategories = {this.BMICategories}\n          category = {this.returnBMICategory(this.state.BMI)}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}